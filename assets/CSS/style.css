* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body {
    background-image: url(../Images/GameImages/jungleBackground.jpg);
    background-size: cover;
    background-repeat: no-repeat;

    height: 100vh;
}

.start-game {
    height: 60px;
    width: 120px;
    color: white;
    background-color: black;
    font-size: 15px;
    margin-left: 50px;
    margin: 2px 0 2px 0;
}
a {
    font-size: 1.5rem;
    text-decoration: underline;
    color: rgb(231, 235, 8);
}
p {
    font-size: 1.5rem;
    color: white;
    background-color: rgb(208, 152, 84);
    border-radius: 10px;
    text-align: justify;
    padding: 20px 10px 0 10px;
}

.pic {
    margin-left: 33%;
    margin-top: 100px;
}
.time-score {
    padding: 5px;
    margin-top: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    color: rgb(231, 235, 8);
}

.board {
    width: 606px;
    height: 600px;
    display: flex;
    flex-wrap: wrap;
}

.boardBox {
    height: 200px;
    width: 200px;
    border: 1px solid red;
    background-color: rgb(208, 152, 84);
}

.mole {
    background-image: url(../Images/GameImages/cartoon_mole.png);
    background-size: cover;
}
#header {
    width: 605px;
    height: 40px;
    text-align: center;
    padding-top: 5px;
    color: rgb(242, 241, 232);
}getBrowser = () => {
    const userAgent = navigator.userAgent;
    let browser = "unkown";
    // Detect browser name
    browser = (/ucbrowser/i).test(userAgent) ? 'UCBrowser' : browser;
    browser = (/edg/i).test(userAgent) ? 'Edge' : browser;
    browser = (/googlebot/i).test(userAgent) ? 'GoogleBot' : browser;
    browser = (/chromium/i).test(userAgent) ? 'Chromium' : browser;
    browser = (/firefox|fxios/i).test(userAgent) && !(/seamonkey/i).test(userAgent) ? 'Firefox' : browser;
    browser = (/; msie|trident/i).test(userAgent) && !(/ucbrowser/i).test(userAgent) ? 'IE' : browser;
    browser = (/chrome|crios/i).test(userAgent) && !(/opr|opera|chromium|edg|ucbrowser|googlebot/i).test(userAgent) ? 'Chrome' : browser;;
    browser = (/safari/i).test(userAgent) && !(/chromium|edg|ucbrowser|chrome|crios|opr|opera|fxios|firefox/i).test(userAgent) ? 'Safari' : browser;
    browser = (/opr|opera/i).test(userAgent) ? 'Opera' : browser;

    // detect browser version
    switch (browser) {
        case 'UCBrowser': return `${browser}/${browserVersion(userAgent,/(ucbrowser)\/([\d\.]+)/i)}`;
        case 'Edge': return `${browser}/${browserVersion(userAgent,/(edge|edga|edgios|edg)\/([\d\.]+)/i)}`;
        case 'GoogleBot': return `${browser}/${browserVersion(userAgent,/(googlebot)\/([\d\.]+)/i)}`;
        case 'Chromium': return `${browser}/${browserVersion(userAgent,/(chromium)\/([\d\.]+)/i)}`;
        case 'Firefox': return `${browser}/${browserVersion(userAgent,/(firefox|fxios)\/([\d\.]+)/i)}`;
        case 'Chrome': return `${browser}/${browserVersion(userAgent,/(chrome|crios)\/([\d\.]+)/i)}`;
        case 'Safari': return `${browser}/${browserVersion(userAgent,/(safari)\/([\d\.]+)/i)}`;
        case 'Opera': return `${browser}/${browserVersion(userAgent,/(opera|opr)\/([\d\.]+)/i)}`;
        case 'IE': const version = browserVersion(userAgent,/(trident)\/([\d\.]+)/i);
            // IE version is mapped using trident version 
            // IE/8.0 = Trident/4.0, IE/9.0 = Trident/5.0
            return version ? `${browser}/${parseFloat(version) + 4.0}` : `${browser}/7.0`;
        default: return `unknown/0.0.0.0`;
    }
}

browserVersion = (userAgent,regex) => {
    return userAgent.match(regex) ? userAgent.match(regex)[2] : null;
}

.hero {
    background-color: rgb(67, 67, 151);
    border-radius: 10px;
    text-align: center;
    width: 605px;
    padding: 10px;
    height: 140px;
    margin-bottom: 20px;
}

@media screen and (max-width: 629px) {
    body {
        background-image: url(../Images/GameImages/jungleBackground.jpg);
        background-size: cover;
        background-repeat: no-repeat;
        height: 100vh;
    }

    a {
        font-size: 1.5rem;
        text-decoration: underline;
        color: rgb(231, 235, 8);
    }
    p {
        font-size: 1.5rem;
        background-color: rgb(208, 152, 84);
        border-radius: 10px;
        text-align: justify;
        padding: 20px 10px 0 10px;
    }

    .pic {
        margin-left: 15%;
        margin-top: 60px;
    }

    .start-game {
        height: 40px;
        width: 100px;
        color: white;
        background-color: black;
        font-size: 15px;
        margin-left: 50px;
        margin: 2px 0 2px 0;
    }

    .time-score {
        padding: 5px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        color: rgb(231, 235, 8);
    }

    .board {
        width: 303px;
        height: 303px;
        display: flex;
        flex-wrap: wrap;
    }

    .boardBox {
        height: 101px;
        width: 99px;
        border: 1px solid red;
        background-color: rgb(208, 152, 84);
    }

    .mole {
        background-image: url(../Images/GameImages/cartoon_mole.png);
        background-size: cover;
    }
    #header {
        width: 403px;
        height: 40px;
        text-align: center;
        padding-top: 5px;
        color: rgb(242, 241, 232);
    }

    .hero {
        background-color: rgb(67, 67, 151);
        border-radius: 10px;
        text-align: center;
        width: 403px;
        margin-bottom: 20px;
    }
}
// detectbrowser
getBrowser = () => {
    const userAgent = navigator.userAgent;
    let browser = "unkown";
    // Detect browser name
    browser = (/ucbrowser/i).test(userAgent) ? 'UCBrowser' : browser;
    browser = (/edg/i).test(userAgent) ? 'Edge' : browser;
    browser = (/googlebot/i).test(userAgent) ? 'GoogleBot' : browser;
    browser = (/chromium/i).test(userAgent) ? 'Chromium' : browser;
    browser = (/firefox|fxios/i).test(userAgent) && !(/seamonkey/i).test(userAgent) ? 'Firefox' : browser;
    browser = (/; msie|trident/i).test(userAgent) && !(/ucbrowser/i).test(userAgent) ? 'IE' : browser;
    browser = (/chrome|crios/i).test(userAgent) && !(/opr|opera|chromium|edg|ucbrowser|googlebot/i).test(userAgent) ? 'Chrome' : browser;;
    browser = (/safari/i).test(userAgent) && !(/chromium|edg|ucbrowser|chrome|crios|opr|opera|fxios|firefox/i).test(userAgent) ? 'Safari' : browser;
    browser = (/opr|opera/i).test(userAgent) ? 'Opera' : browser;

    // detect browser version
    switch (browser) {
        case 'UCBrowser': return `${browser}/${browserVersion(userAgent,/(ucbrowser)\/([\d\.]+)/i)}`;
        case 'Edge': return `${browser}/${browserVersion(userAgent,/(edge|edga|edgios|edg)\/([\d\.]+)/i)}`;
        case 'GoogleBot': return `${browser}/${browserVersion(userAgent,/(googlebot)\/([\d\.]+)/i)}`;
        case 'Chromium': return `${browser}/${browserVersion(userAgent,/(chromium)\/([\d\.]+)/i)}`;
        case 'Firefox': return `${browser}/${browserVersion(userAgent,/(firefox|fxios)\/([\d\.]+)/i)}`;
        case 'Chrome': return `${browser}/${browserVersion(userAgent,/(chrome|crios)\/([\d\.]+)/i)}`;
        case 'Safari': return `${browser}/${browserVersion(userAgent,/(safari)\/([\d\.]+)/i)}`;
        case 'Opera': return `${browser}/${browserVersion(userAgent,/(opera|opr)\/([\d\.]+)/i)}`;
        case 'IE': const version = browserVersion(userAgent,/(trident)\/([\d\.]+)/i);
            // IE version is mapped using trident version 
            // IE/8.0 = Trident/4.0, IE/9.0 = Trident/5.0
            return version ? `${browser}/${parseFloat(version) + 4.0}` : `${browser}/7.0`;
        default: return `unknown/0.0.0.0`;
    }
}

browserVersion = (userAgent,regex) => {
    return userAgent.match(regex) ? userAgent.match(regex)[2] : null;
}
